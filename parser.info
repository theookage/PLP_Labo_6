-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from ./parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Spec                              (0)
	Spec -> Decl                                       (1)
	Spec -> Expr                                       (2)
	Decl -> 'const' name '=' Expr                      (3)
	Decl -> Type name '(' Arg ')'                      (4)
	Expr -> name                                       (5)
	Expr -> let name '=' Expr in Expr                  (6)
	Expr -> name '(' Arg ')'                           (7)
	Expr -> '(' Arg ')'                                (8)
	Expr -> Op                                         (9)
	Expr -> Lit                                        (10)
	Arg -> Expr                                        (11)
	Arg -> Expr ',' Arg                                (12)
	Op -> Expr '+' Expr                                (13)
	Op -> Expr '-' Expr                                (14)
	Op -> Expr '*' Expr                                (15)
	Op -> Expr '/' Expr                                (16)
	Op -> Expr '||' Expr                               (17)
	Op -> Expr '&&' Expr                               (18)
	Op -> Expr '==' Expr                               (19)
	Op -> Expr '++'                                    (20)
	Op -> Expr '--'                                    (21)
	Type -> 'int'                                      (22)
	Type -> 'bool'                                     (23)
	Lit -> Factor                                      (24)
	Lit -> '{' Tuples '}'                              (25)
	Tuples -> Expr ',' Expr                            (26)
	Tuples -> Expr ',' Tuples                          (27)
	Factor -> int                                      (28)
	Factor -> '-' int                                  (29)
	Factor -> bool                                     (30)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	name           { Name $$ }
	int            { Int $$ }
	bool           { Bool $$ }
	let            { Let }
	in             { In }
	'('            { LParen }
	')'            { RParen }
	'{'            { LAcol }
	'}'            { RAcol }
	'=='           { Equals }
	'='            { Eq }
	'&&'           { And }
	'||'           { Or }
	'+'            { Plus }
	'-'            { Minus }
	'++'           { Plusplus }
	'--'           { Minusminus }
	'*'            { Mult }
	'/'            { Divide }
	','            { Comma }
	'const'        { Const }
	'int'          { TInt }
	'bool'         { TBool }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Spec            rules 1, 2
	Decl            rules 3, 4
	Expr            rules 5, 6, 7, 8, 9, 10
	Arg             rules 11, 12
	Op              rules 13, 14, 15, 16, 17, 18, 19, 20, 21
	Type            rules 22, 23
	Lit             rules 24, 25
	Tuples          rules 26, 27
	Factor          rules 28, 29, 30

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18
	'const'        shift, and enter state 4
	'int'          shift, and enter state 5
	'bool'         shift, and enter state 6

	Spec           goto state 7
	Decl           goto state 2
	Expr           goto state 8
	Op             goto state 9
	Type           goto state 3
	Lit            goto state 10
	Factor         goto state 11

State 1


	'const'        shift, and enter state 4
	'int'          shift, and enter state 5
	'bool'         shift, and enter state 6

	Decl           goto state 2
	Type           goto state 3

State 2

	Spec -> Decl .                                      (rule 1)

	%eof           reduce using rule 1


State 3

	Decl -> Type . name '(' Arg ')'                     (rule 4)

	name           shift, and enter state 36


State 4

	Decl -> 'const' . name '=' Expr                     (rule 3)

	name           shift, and enter state 35


State 5

	Type -> 'int' .                                     (rule 22)

	name           reduce using rule 22


State 6

	Type -> 'bool' .                                    (rule 23)

	name           reduce using rule 23


State 7

	%start_parser -> Spec .                             (rule 0)

	%eof           accept


State 8

	Spec -> Expr .                                      (rule 2)
	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34
	%eof           reduce using rule 2


State 9

	Expr -> Op .                                        (rule 9)

	in             reduce using rule 9
	')'            reduce using rule 9
	'}'            reduce using rule 9
	'=='           reduce using rule 9
	'&&'           reduce using rule 9
	'||'           reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'++'           reduce using rule 9
	'--'           reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	','            reduce using rule 9
	%eof           reduce using rule 9


State 10

	Expr -> Lit .                                       (rule 10)

	in             reduce using rule 10
	')'            reduce using rule 10
	'}'            reduce using rule 10
	'=='           reduce using rule 10
	'&&'           reduce using rule 10
	'||'           reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'++'           reduce using rule 10
	'--'           reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	','            reduce using rule 10
	%eof           reduce using rule 10


State 11

	Lit -> Factor .                                     (rule 24)

	in             reduce using rule 24
	')'            reduce using rule 24
	'}'            reduce using rule 24
	'=='           reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'++'           reduce using rule 24
	'--'           reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	','            reduce using rule 24
	%eof           reduce using rule 24


State 12

	Expr -> name .                                      (rule 5)
	Expr -> name . '(' Arg ')'                          (rule 7)

	in             reduce using rule 5
	'('            shift, and enter state 25
	')'            reduce using rule 5
	'}'            reduce using rule 5
	'=='           reduce using rule 5
	'&&'           reduce using rule 5
	'||'           reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'++'           reduce using rule 5
	'--'           reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	','            reduce using rule 5
	%eof           reduce using rule 5


State 13

	Factor -> int .                                     (rule 28)

	in             reduce using rule 28
	')'            reduce using rule 28
	'}'            reduce using rule 28
	'=='           reduce using rule 28
	'&&'           reduce using rule 28
	'||'           reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'++'           reduce using rule 28
	'--'           reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	','            reduce using rule 28
	%eof           reduce using rule 28


State 14

	Factor -> bool .                                    (rule 30)

	in             reduce using rule 30
	')'            reduce using rule 30
	'}'            reduce using rule 30
	'=='           reduce using rule 30
	'&&'           reduce using rule 30
	'||'           reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'++'           reduce using rule 30
	'--'           reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	','            reduce using rule 30
	%eof           reduce using rule 30


State 15

	Expr -> let . name '=' Expr in Expr                 (rule 6)

	name           shift, and enter state 24


State 16

	Expr -> '(' . Arg ')'                               (rule 8)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 22
	Arg            goto state 23
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 17

	Lit -> '{' . Tuples '}'                             (rule 25)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 20
	Op             goto state 9
	Lit            goto state 10
	Tuples         goto state 21
	Factor         goto state 11

State 18

	Factor -> '-' . int                                 (rule 29)

	int            shift, and enter state 19


State 19

	Factor -> '-' int .                                 (rule 29)

	in             reduce using rule 29
	')'            reduce using rule 29
	'}'            reduce using rule 29
	'=='           reduce using rule 29
	'&&'           reduce using rule 29
	'||'           reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'++'           reduce using rule 29
	'--'           reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	','            reduce using rule 29
	%eof           reduce using rule 29


State 20

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)
	Tuples -> Expr . ',' Expr                           (rule 26)
	Tuples -> Expr . ',' Tuples                         (rule 27)

	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34
	','            shift, and enter state 51


State 21

	Lit -> '{' Tuples . '}'                             (rule 25)

	'}'            shift, and enter state 50


State 22

	Arg -> Expr .                                       (rule 11)
	Arg -> Expr . ',' Arg                               (rule 12)
	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	')'            reduce using rule 11
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34
	','            shift, and enter state 49


State 23

	Expr -> '(' Arg . ')'                               (rule 8)

	')'            shift, and enter state 48


State 24

	Expr -> let name . '=' Expr in Expr                 (rule 6)

	'='            shift, and enter state 47


State 25

	Expr -> name '(' . Arg ')'                          (rule 7)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 22
	Arg            goto state 46
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 26

	Op -> Expr '==' . Expr                              (rule 19)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 45
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 27

	Op -> Expr '&&' . Expr                              (rule 18)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 44
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 28

	Op -> Expr '||' . Expr                              (rule 17)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 43
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 29

	Op -> Expr '+' . Expr                               (rule 13)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 42
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 30

	Op -> Expr '-' . Expr                               (rule 14)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 41
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 31

	Op -> Expr '++' .                                   (rule 20)

	in             reduce using rule 20
	')'            reduce using rule 20
	'}'            reduce using rule 20
	'=='           reduce using rule 20
	'&&'           reduce using rule 20
	'||'           reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'++'           reduce using rule 20
	'--'           reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	','            reduce using rule 20
	%eof           reduce using rule 20


State 32

	Op -> Expr '--' .                                   (rule 21)

	in             reduce using rule 21
	')'            reduce using rule 21
	'}'            reduce using rule 21
	'=='           reduce using rule 21
	'&&'           reduce using rule 21
	'||'           reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'++'           reduce using rule 21
	'--'           reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	','            reduce using rule 21
	%eof           reduce using rule 21


State 33

	Op -> Expr '*' . Expr                               (rule 15)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 40
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 34

	Op -> Expr '/' . Expr                               (rule 16)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 39
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 35

	Decl -> 'const' name . '=' Expr                     (rule 3)

	'='            shift, and enter state 38


State 36

	Decl -> Type name . '(' Arg ')'                     (rule 4)

	'('            shift, and enter state 37


State 37

	Decl -> Type name '(' . Arg ')'                     (rule 4)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 22
	Arg            goto state 58
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 38

	Decl -> 'const' name '=' . Expr                     (rule 3)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 57
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 39

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr '/' Expr .                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 16
	')'            reduce using rule 16
	'}'            reduce using rule 16
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	','            reduce using rule 16
	%eof           reduce using rule 16


State 40

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr '*' Expr .                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 15
	')'            reduce using rule 15
	'}'            reduce using rule 15
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	','            reduce using rule 15
	%eof           reduce using rule 15


State 41

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr '-' Expr .                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 14
	')'            reduce using rule 14
	'}'            reduce using rule 14
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34
	','            reduce using rule 14
	%eof           reduce using rule 14


State 42

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr '+' Expr .                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 13
	')'            reduce using rule 13
	'}'            reduce using rule 13
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34
	','            reduce using rule 13
	%eof           reduce using rule 13


State 43

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr '||' Expr .                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 17
	')'            reduce using rule 17
	'}'            reduce using rule 17
	'=='           reduce using rule 17
	'&&'           reduce using rule 17
	'||'           reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	','            reduce using rule 17
	%eof           reduce using rule 17


State 44

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr '&&' Expr .                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 18
	')'            reduce using rule 18
	'}'            reduce using rule 18
	'=='           reduce using rule 18
	'&&'           reduce using rule 18
	'||'           reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	','            reduce using rule 18
	%eof           reduce using rule 18


State 45

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr '==' Expr .                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 19
	')'            reduce using rule 19
	'}'            reduce using rule 19
	'=='           reduce using rule 19
	'&&'           reduce using rule 19
	'||'           reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	','            reduce using rule 19
	%eof           reduce using rule 19


State 46

	Expr -> name '(' Arg . ')'                          (rule 7)

	')'            shift, and enter state 56


State 47

	Expr -> let name '=' . Expr in Expr                 (rule 6)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 55
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 48

	Expr -> '(' Arg ')' .                               (rule 8)

	in             reduce using rule 8
	')'            reduce using rule 8
	'}'            reduce using rule 8
	'=='           reduce using rule 8
	'&&'           reduce using rule 8
	'||'           reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'++'           reduce using rule 8
	'--'           reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	','            reduce using rule 8
	%eof           reduce using rule 8


State 49

	Arg -> Expr ',' . Arg                               (rule 12)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 22
	Arg            goto state 54
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 50

	Lit -> '{' Tuples '}' .                             (rule 25)

	in             reduce using rule 25
	')'            reduce using rule 25
	'}'            reduce using rule 25
	'=='           reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'++'           reduce using rule 25
	'--'           reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	','            reduce using rule 25
	%eof           reduce using rule 25


State 51

	Tuples -> Expr ',' . Expr                           (rule 26)
	Tuples -> Expr ',' . Tuples                         (rule 27)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 52
	Op             goto state 9
	Lit            goto state 10
	Tuples         goto state 53
	Factor         goto state 11

State 52

	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)
	Tuples -> Expr . ',' Expr                           (rule 26)
	Tuples -> Expr ',' Expr .                           (rule 26)
	Tuples -> Expr . ',' Tuples                         (rule 27)

	'}'            reduce using rule 26
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34
	','            shift, and enter state 51


State 53

	Tuples -> Expr ',' Tuples .                         (rule 27)

	'}'            reduce using rule 27


State 54

	Arg -> Expr ',' Arg .                               (rule 12)

	')'            reduce using rule 12


State 55

	Expr -> let name '=' Expr . in Expr                 (rule 6)
	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             shift, and enter state 60
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34


State 56

	Expr -> name '(' Arg ')' .                          (rule 7)

	in             reduce using rule 7
	')'            reduce using rule 7
	'}'            reduce using rule 7
	'=='           reduce using rule 7
	'&&'           reduce using rule 7
	'||'           reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'++'           reduce using rule 7
	'--'           reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	','            reduce using rule 7
	%eof           reduce using rule 7


State 57

	Decl -> 'const' name '=' Expr .                     (rule 3)
	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'++'           shift, and enter state 31
	'--'           shift, and enter state 32
	'*'            shift, and enter state 33
	'/'            shift, and enter state 34
	%eof           reduce using rule 3


State 58

	Decl -> Type name '(' Arg . ')'                     (rule 4)

	')'            shift, and enter state 59


State 59

	Decl -> Type name '(' Arg ')' .                     (rule 4)

	%eof           reduce using rule 4


State 60

	Expr -> let name '=' Expr in . Expr                 (rule 6)

	name           shift, and enter state 12
	int            shift, and enter state 13
	bool           shift, and enter state 14
	let            shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 17
	'-'            shift, and enter state 18

	Expr           goto state 61
	Op             goto state 9
	Lit            goto state 10
	Factor         goto state 11

State 61

	Expr -> let name '=' Expr in Expr .                 (rule 6)
	Op -> Expr . '+' Expr                               (rule 13)
	Op -> Expr . '-' Expr                               (rule 14)
	Op -> Expr . '*' Expr                               (rule 15)
	Op -> Expr . '/' Expr                               (rule 16)
	Op -> Expr . '||' Expr                              (rule 17)
	Op -> Expr . '&&' Expr                              (rule 18)
	Op -> Expr . '==' Expr                              (rule 19)
	Op -> Expr . '++'                                   (rule 20)
	Op -> Expr . '--'                                   (rule 21)

	in             reduce using rule 6
	')'            reduce using rule 6
	'}'            reduce using rule 6
	'=='           reduce using rule 6
	'&&'           reduce using rule 6
	'||'           reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'++'           reduce using rule 6
	'--'           reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	','            reduce using rule 6
	%eof           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 31
Number of terminals: 23
Number of non-terminals: 10
Number of states: 62
