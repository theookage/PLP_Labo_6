-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from parser.y
-----------------------------------------------------------------------------

state 9 contains 4 reduce/reduce conflicts.
state 37 contains 7 shift/reduce conflicts.
state 39 contains 7 shift/reduce conflicts.
state 40 contains 7 shift/reduce conflicts.
state 41 contains 7 shift/reduce conflicts.
state 42 contains 7 shift/reduce conflicts.
state 43 contains 7 shift/reduce conflicts.
state 44 contains 7 shift/reduce conflicts.
state 52 contains 1 reduce/reduce conflicts.

terminal else is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Spec                              (0)
	Spec -> Decl                                       (1)
	Spec -> Expr                                       (2)
	Decl -> 'const' name '=' Expr                      (3)
	Decl -> type name '(' Arg ')'                      (4)
	Decl -> type name '(' ')'                          (5)
	Expr -> 'int' Factor                               (6)
	Expr -> 'bool' Factor                              (7)
	Expr -> name                                       (8)
	Expr -> let name '=' Expr in Expr                  (9)
	Expr -> name '(' Arg ')'                           (10)
	Expr -> name '(' ')'                               (11)
	Expr -> '(' Arg ')'                                (12)
	Expr -> Op                                         (13)
	Expr -> Lit                                        (14)
	Arg -> Expr                                        (15)
	Arg -> Expr ',' Arg                                (16)
	Op -> Op '+' Op                                    (17)
	Op -> Op '-' Op                                    (18)
	Op -> Op '*' Op                                    (19)
	Op -> Op '||' Op                                   (20)
	Op -> Op '&&' Op                                   (21)
	Op -> Op '==' Op                                   (22)
	Op -> Op '/' Op                                    (23)
	Op -> Factor '++'                                  (24)
	Op -> Factor '--'                                  (25)
	Op -> Factor                                       (26)
	Lit -> Factor                                      (27)
	Lit -> '(' Tuples ')'                              (28)
	Tuples -> Expr ',' Tuples                          (29)
	Tuples -> Expr ',' Expr                            (30)
	Factor -> int                                      (31)
	Factor -> bool                                     (32)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	name           { Name $$ }
	int            { Int $$ }
	bool           { Bool $$ }
	let            { Let }
	in             { In }
	else           { Else }
	'('            { LParen }
	')'            { RParen }
	'=='           { Equals }
	'='            { Eq }
	'&&'           { And }
	'||'           { Or }
	'+'            { Plus }
	'-'            { Minus }
	'++'           { Plusplus }
	'--'           { Minusminus }
	'*'            { Mult }
	'/'            { Divide }
	','            { Comma }
	'const'        { Const }
	type           { Type $$ }
	'int'          { TInt }
	'bool'         { TBool }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Spec            rules 1, 2
	Decl            rules 3, 4, 5
	Expr            rules 6, 7, 8, 9, 10, 11, 12, 13, 14
	Arg             rules 15, 16
	Op              rules 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
	Lit             rules 27, 28
	Tuples          rules 29, 30
	Factor          rules 31, 32

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Spec                             (rule 0)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	'const'        shift, and enter state 3
	type           shift, and enter state 4
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Spec           goto state 5
	Decl           goto state 2
	Expr           goto state 6
	Op             goto state 7
	Lit            goto state 8
	Factor         goto state 9

State 1

	Spec -> . Decl                                      (rule 1)

	'const'        shift, and enter state 3
	type           shift, and enter state 4

	Decl           goto state 2

State 2

	Spec -> Decl .                                      (rule 1)

	%eof           reduce using rule 1


State 3

	Decl -> 'const' . name '=' Expr                     (rule 3)

	name           shift, and enter state 34


State 4

	Decl -> type . name '(' Arg ')'                     (rule 4)
	Decl -> type . name '(' ')'                         (rule 5)

	name           shift, and enter state 33


State 5

	%start_parser -> Spec .                             (rule 0)

	%eof           accept


State 6

	Spec -> Expr .                                      (rule 2)

	%eof           reduce using rule 2


State 7

	Expr -> Op .                                        (rule 13)
	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)

	in             reduce using rule 13
	')'            reduce using rule 13
	'=='           shift, and enter state 26
	'&&'           shift, and enter state 27
	'||'           shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	','            reduce using rule 13
	%eof           reduce using rule 13


State 8

	Expr -> Lit .                                       (rule 14)

	in             reduce using rule 14
	')'            reduce using rule 14
	','            reduce using rule 14
	%eof           reduce using rule 14


State 9

	Op -> Factor . '++'                                 (rule 24)
	Op -> Factor . '--'                                 (rule 25)
	Op -> Factor .                                      (rule 26)
	Lit -> Factor .                                     (rule 27)

	in             reduce using rule 27
			(reduce using rule 26)

	')'            reduce using rule 27
			(reduce using rule 26)

	'=='           reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'++'           shift, and enter state 24
	'--'           shift, and enter state 25
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	','            reduce using rule 27
			(reduce using rule 26)

	%eof           reduce using rule 27
			(reduce using rule 26)



State 10

	Expr -> name .                                      (rule 8)
	Expr -> name . '(' Arg ')'                          (rule 10)
	Expr -> name . '(' ')'                              (rule 11)

	in             reduce using rule 8
	'('            shift, and enter state 23
	')'            reduce using rule 8
	','            reduce using rule 8
	%eof           reduce using rule 8


State 11

	Factor -> int .                                     (rule 31)

	in             reduce using rule 31
	')'            reduce using rule 31
	'=='           reduce using rule 31
	'&&'           reduce using rule 31
	'||'           reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'++'           reduce using rule 31
	'--'           reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	','            reduce using rule 31
	%eof           reduce using rule 31


State 12

	Factor -> bool .                                    (rule 32)

	in             reduce using rule 32
	')'            reduce using rule 32
	'=='           reduce using rule 32
	'&&'           reduce using rule 32
	'||'           reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'++'           reduce using rule 32
	'--'           reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	','            reduce using rule 32
	%eof           reduce using rule 32


State 13

	Expr -> let . name '=' Expr in Expr                 (rule 9)

	name           shift, and enter state 22


State 14

	Expr -> '(' . Arg ')'                               (rule 12)
	Lit -> '(' . Tuples ')'                             (rule 28)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 19
	Arg            goto state 20
	Op             goto state 7
	Lit            goto state 8
	Tuples         goto state 21
	Factor         goto state 9

State 15

	Expr -> 'int' . Factor                              (rule 6)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Factor         goto state 18

State 16

	Expr -> 'bool' . Factor                             (rule 7)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Factor         goto state 17

State 17

	Expr -> 'bool' Factor .                             (rule 7)

	in             reduce using rule 7
	')'            reduce using rule 7
	','            reduce using rule 7
	%eof           reduce using rule 7


State 18

	Expr -> 'int' Factor .                              (rule 6)

	in             reduce using rule 6
	')'            reduce using rule 6
	','            reduce using rule 6
	%eof           reduce using rule 6


State 19

	Arg -> Expr .                                       (rule 15)
	Arg -> Expr . ',' Arg                               (rule 16)
	Tuples -> Expr . ',' Tuples                         (rule 29)
	Tuples -> Expr . ',' Expr                           (rule 30)

	')'            reduce using rule 15
	','            shift, and enter state 51


State 20

	Expr -> '(' Arg . ')'                               (rule 12)

	')'            shift, and enter state 50


State 21

	Lit -> '(' Tuples . ')'                             (rule 28)

	')'            shift, and enter state 49


State 22

	Expr -> let name . '=' Expr in Expr                 (rule 9)

	'='            shift, and enter state 48


State 23

	Expr -> name '(' . Arg ')'                          (rule 10)
	Expr -> name '(' . ')'                              (rule 11)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	')'            shift, and enter state 47
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 45
	Arg            goto state 46
	Op             goto state 7
	Lit            goto state 8
	Factor         goto state 9

State 24

	Op -> Factor '++' .                                 (rule 24)

	in             reduce using rule 24
	')'            reduce using rule 24
	'=='           reduce using rule 24
	'&&'           reduce using rule 24
	'||'           reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	','            reduce using rule 24
	%eof           reduce using rule 24


State 25

	Op -> Factor '--' .                                 (rule 25)

	in             reduce using rule 25
	')'            reduce using rule 25
	'=='           reduce using rule 25
	'&&'           reduce using rule 25
	'||'           reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	','            reduce using rule 25
	%eof           reduce using rule 25


State 26

	Op -> Op '==' . Op                                  (rule 22)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Op             goto state 44
	Factor         goto state 38

State 27

	Op -> Op '&&' . Op                                  (rule 21)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Op             goto state 43
	Factor         goto state 38

State 28

	Op -> Op '||' . Op                                  (rule 20)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Op             goto state 42
	Factor         goto state 38

State 29

	Op -> Op '+' . Op                                   (rule 17)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Op             goto state 41
	Factor         goto state 38

State 30

	Op -> Op '-' . Op                                   (rule 18)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Op             goto state 40
	Factor         goto state 38

State 31

	Op -> Op '*' . Op                                   (rule 19)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Op             goto state 39
	Factor         goto state 38

State 32

	Op -> Op '/' . Op                                   (rule 23)

	int            shift, and enter state 11
	bool           shift, and enter state 12

	Op             goto state 37
	Factor         goto state 38

State 33

	Decl -> type name . '(' Arg ')'                     (rule 4)
	Decl -> type name . '(' ')'                         (rule 5)

	'('            shift, and enter state 36


State 34

	Decl -> 'const' name . '=' Expr                     (rule 3)

	'='            shift, and enter state 35


State 35

	Decl -> 'const' name '=' . Expr                     (rule 3)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 60
	Op             goto state 7
	Lit            goto state 8
	Factor         goto state 9

State 36

	Decl -> type name '(' . Arg ')'                     (rule 4)
	Decl -> type name '(' . ')'                         (rule 5)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	')'            shift, and enter state 59
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 45
	Arg            goto state 58
	Op             goto state 7
	Lit            goto state 8
	Factor         goto state 9

State 37

	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)
	Op -> Op '/' Op .                                   (rule 23)

	in             reduce using rule 23
	')'            reduce using rule 23
	'=='           shift, and enter state 26
			(reduce using rule 23)

	'&&'           shift, and enter state 27
			(reduce using rule 23)

	'||'           shift, and enter state 28
			(reduce using rule 23)

	'+'            shift, and enter state 29
			(reduce using rule 23)

	'-'            shift, and enter state 30
			(reduce using rule 23)

	'*'            shift, and enter state 31
			(reduce using rule 23)

	'/'            shift, and enter state 32
			(reduce using rule 23)

	','            reduce using rule 23
	%eof           reduce using rule 23


State 38

	Op -> Factor . '++'                                 (rule 24)
	Op -> Factor . '--'                                 (rule 25)
	Op -> Factor .                                      (rule 26)

	in             reduce using rule 26
	')'            reduce using rule 26
	'=='           reduce using rule 26
	'&&'           reduce using rule 26
	'||'           reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'++'           shift, and enter state 24
	'--'           shift, and enter state 25
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	','            reduce using rule 26
	%eof           reduce using rule 26


State 39

	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op '*' Op .                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)

	in             reduce using rule 19
	')'            reduce using rule 19
	'=='           shift, and enter state 26
			(reduce using rule 19)

	'&&'           shift, and enter state 27
			(reduce using rule 19)

	'||'           shift, and enter state 28
			(reduce using rule 19)

	'+'            shift, and enter state 29
			(reduce using rule 19)

	'-'            shift, and enter state 30
			(reduce using rule 19)

	'*'            shift, and enter state 31
			(reduce using rule 19)

	'/'            shift, and enter state 32
			(reduce using rule 19)

	','            reduce using rule 19
	%eof           reduce using rule 19


State 40

	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op '-' Op .                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)

	in             reduce using rule 18
	')'            reduce using rule 18
	'=='           shift, and enter state 26
			(reduce using rule 18)

	'&&'           shift, and enter state 27
			(reduce using rule 18)

	'||'           shift, and enter state 28
			(reduce using rule 18)

	'+'            shift, and enter state 29
			(reduce using rule 18)

	'-'            shift, and enter state 30
			(reduce using rule 18)

	'*'            shift, and enter state 31
			(reduce using rule 18)

	'/'            shift, and enter state 32
			(reduce using rule 18)

	','            reduce using rule 18
	%eof           reduce using rule 18


State 41

	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op '+' Op .                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)

	in             reduce using rule 17
	')'            reduce using rule 17
	'=='           shift, and enter state 26
			(reduce using rule 17)

	'&&'           shift, and enter state 27
			(reduce using rule 17)

	'||'           shift, and enter state 28
			(reduce using rule 17)

	'+'            shift, and enter state 29
			(reduce using rule 17)

	'-'            shift, and enter state 30
			(reduce using rule 17)

	'*'            shift, and enter state 31
			(reduce using rule 17)

	'/'            shift, and enter state 32
			(reduce using rule 17)

	','            reduce using rule 17
	%eof           reduce using rule 17


State 42

	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op '||' Op .                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)

	in             reduce using rule 20
	')'            reduce using rule 20
	'=='           shift, and enter state 26
			(reduce using rule 20)

	'&&'           shift, and enter state 27
			(reduce using rule 20)

	'||'           shift, and enter state 28
			(reduce using rule 20)

	'+'            shift, and enter state 29
			(reduce using rule 20)

	'-'            shift, and enter state 30
			(reduce using rule 20)

	'*'            shift, and enter state 31
			(reduce using rule 20)

	'/'            shift, and enter state 32
			(reduce using rule 20)

	','            reduce using rule 20
	%eof           reduce using rule 20


State 43

	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op '&&' Op .                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)

	in             reduce using rule 21
	')'            reduce using rule 21
	'=='           shift, and enter state 26
			(reduce using rule 21)

	'&&'           shift, and enter state 27
			(reduce using rule 21)

	'||'           shift, and enter state 28
			(reduce using rule 21)

	'+'            shift, and enter state 29
			(reduce using rule 21)

	'-'            shift, and enter state 30
			(reduce using rule 21)

	'*'            shift, and enter state 31
			(reduce using rule 21)

	'/'            shift, and enter state 32
			(reduce using rule 21)

	','            reduce using rule 21
	%eof           reduce using rule 21


State 44

	Op -> Op . '+' Op                                   (rule 17)
	Op -> Op . '-' Op                                   (rule 18)
	Op -> Op . '*' Op                                   (rule 19)
	Op -> Op . '||' Op                                  (rule 20)
	Op -> Op . '&&' Op                                  (rule 21)
	Op -> Op . '==' Op                                  (rule 22)
	Op -> Op '==' Op .                                  (rule 22)
	Op -> Op . '/' Op                                   (rule 23)

	in             reduce using rule 22
	')'            reduce using rule 22
	'=='           shift, and enter state 26
			(reduce using rule 22)

	'&&'           shift, and enter state 27
			(reduce using rule 22)

	'||'           shift, and enter state 28
			(reduce using rule 22)

	'+'            shift, and enter state 29
			(reduce using rule 22)

	'-'            shift, and enter state 30
			(reduce using rule 22)

	'*'            shift, and enter state 31
			(reduce using rule 22)

	'/'            shift, and enter state 32
			(reduce using rule 22)

	','            reduce using rule 22
	%eof           reduce using rule 22


State 45

	Arg -> Expr .                                       (rule 15)
	Arg -> Expr . ',' Arg                               (rule 16)

	')'            reduce using rule 15
	','            shift, and enter state 57


State 46

	Expr -> name '(' Arg . ')'                          (rule 10)

	')'            shift, and enter state 56


State 47

	Expr -> name '(' ')' .                              (rule 11)

	in             reduce using rule 11
	')'            reduce using rule 11
	','            reduce using rule 11
	%eof           reduce using rule 11


State 48

	Expr -> let name '=' . Expr in Expr                 (rule 9)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 55
	Op             goto state 7
	Lit            goto state 8
	Factor         goto state 9

State 49

	Lit -> '(' Tuples ')' .                             (rule 28)

	in             reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	%eof           reduce using rule 28


State 50

	Expr -> '(' Arg ')' .                               (rule 12)

	in             reduce using rule 12
	')'            reduce using rule 12
	','            reduce using rule 12
	%eof           reduce using rule 12


State 51

	Arg -> Expr ',' . Arg                               (rule 16)
	Tuples -> Expr ',' . Tuples                         (rule 29)
	Tuples -> Expr ',' . Expr                           (rule 30)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 52
	Arg            goto state 53
	Op             goto state 7
	Lit            goto state 8
	Tuples         goto state 54
	Factor         goto state 9

State 52

	Arg -> Expr .                                       (rule 15)
	Arg -> Expr . ',' Arg                               (rule 16)
	Tuples -> Expr . ',' Tuples                         (rule 29)
	Tuples -> Expr . ',' Expr                           (rule 30)
	Tuples -> Expr ',' Expr .                           (rule 30)

	')'            reduce using rule 30
			(reduce using rule 15)

	','            shift, and enter state 51


State 53

	Arg -> Expr ',' Arg .                               (rule 16)

	')'            reduce using rule 16


State 54

	Tuples -> Expr ',' Tuples .                         (rule 29)

	')'            reduce using rule 29


State 55

	Expr -> let name '=' Expr . in Expr                 (rule 9)

	in             shift, and enter state 62


State 56

	Expr -> name '(' Arg ')' .                          (rule 10)

	in             reduce using rule 10
	')'            reduce using rule 10
	','            reduce using rule 10
	%eof           reduce using rule 10


State 57

	Arg -> Expr ',' . Arg                               (rule 16)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 45
	Arg            goto state 53
	Op             goto state 7
	Lit            goto state 8
	Factor         goto state 9

State 58

	Decl -> type name '(' Arg . ')'                     (rule 4)

	')'            shift, and enter state 61


State 59

	Decl -> type name '(' ')' .                         (rule 5)

	%eof           reduce using rule 5


State 60

	Decl -> 'const' name '=' Expr .                     (rule 3)

	%eof           reduce using rule 3


State 61

	Decl -> type name '(' Arg ')' .                     (rule 4)

	%eof           reduce using rule 4


State 62

	Expr -> let name '=' Expr in . Expr                 (rule 9)

	name           shift, and enter state 10
	int            shift, and enter state 11
	bool           shift, and enter state 12
	let            shift, and enter state 13
	'('            shift, and enter state 14
	'int'          shift, and enter state 15
	'bool'         shift, and enter state 16

	Expr           goto state 63
	Op             goto state 7
	Lit            goto state 8
	Factor         goto state 9

State 63

	Expr -> let name '=' Expr in Expr .                 (rule 9)

	in             reduce using rule 9
	')'            reduce using rule 9
	','            reduce using rule 9
	%eof           reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 33
Number of terminals: 23
Number of non-terminals: 9
Number of states: 64
